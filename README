Xie Yu, SID: 204398665
Guanya Yang, SID: 204378262

CS 111 Lab 1b: Profiling Shell Execution
————————————————————————————————————————— 
We implemented the execution of the shell input created from part 1a. The input are executed as commands by the execute_command() function detailed in the file execute-command.c. We handle any stdin or stdout redirection, as well as the command type while executing the commands.

We handled the stdin and stdout redirection by closing the stdin/stdout file descriptor and opening the input or output redirection of the command.

For each command type, we evaluate all commands except for the SIMPLE_COMMAND recursively, so that each subcommand calls the execute_command() function again. We handle SIMPLE_COMMANDs separately in the exec_simple_command() function, which forks a child process for each simple command. There is also a separate function exec_pipe_command() for the PIPE_COMMAND by using the system calls pipe() and dup2() in order to achieve interprocess communication (IPC). We created copies of stdin(0) and stdout(1) so as not to modify them while implementing pipes or redirections.

Finally, we created two test cases: test_1b_good.sh and test_1b_bad.sh.

